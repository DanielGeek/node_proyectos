"Validate level types"
enum Level {
  beginner
  intermediate
  advanced
}

type Course {
  _id: ID!
  title: String!
  teacher: String
  description: String!
  topic: String
  people: [Student]
  level: Level
}

interface Person {
  _id: ID!
  name: String!
  email: String!
}

type Student implements Person {
  _id: ID!
  name: String!
  email: String!
  avatar: String
}

type Display implements Person {
  _id: ID!
  name: String!
  email: String!
  phone: String
}

type Query {
    "Return all courses"
    getCourses: [Course]
    "Return one course"
    getCourse(id: ID!): Course
    "Return all students"
    getPeople: [Person]
    "Return one course"
    getPerson(id: ID!): Person
  }

input CourseInput {
  title: String!
  teacher: String
  description: String!
  topic: String
  level: Level
}

input CourseEditInput {
  title: String
  teacher: String
  description: String
  topic: String
}

input PersonInput {
  name: String!
  email: String!
  phone: String
  avatar: String
}

input PersonEditInput {
  name: String
  email: String
  phone: String
  avatar: String
}

type Mutation {
    "Create a course"
    createCourse(input: CourseInput!): Course
    "Edit a course"
    editCourse(_id: ID!, input: CourseEditInput): Course
    "Create a person"
    createPerson(input: PersonInput!): Person
    "Edit a person"
    editPerson(_id: ID!, input: PersonEditInput): Person
    "Add a person to course"
    addPeople(courseID: ID!, personID: ID!): Course
}